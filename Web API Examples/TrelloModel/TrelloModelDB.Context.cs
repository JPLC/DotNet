//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using System.Data.Entity.Validation;

namespace TrelloModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TrelloModelDBContainer : DbContext
    {
        public TrelloModelDBContainer()
            : base("name=TrelloModelDBContainer")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }

        protected override DbEntityValidationResult ValidateEntity(DbEntityEntry entityEntry, System.Collections.Generic.IDictionary<object, object> items)
        {
            if (entityEntry.Entity is Board)
            {
                if (entityEntry.CurrentValues.GetValue<string>("Name") == string.Empty)
                {
                    var list = new List<System.Data.Entity.Validation.DbValidationError>();
                    list.Add(new System.Data.Entity.Validation.DbValidationError("Name", "Board Name is required"));

                    return new DbEntityValidationResult(entityEntry, list);
                }
            }
            if (entityEntry.Entity is List)
            {
                if (entityEntry.CurrentValues.GetValue<string>("Name") == string.Empty)
                {
                    var list = new List<System.Data.Entity.Validation.DbValidationError>();
                    list.Add(new System.Data.Entity.Validation.DbValidationError("Name", "List Name is required"));

                    return new System.Data.Entity.Validation.DbEntityValidationResult(entityEntry, list);
                }
            }
            if (entityEntry.Entity is Card)
            {
                if (entityEntry.CurrentValues.GetValue<string>("Name") == string.Empty)
                {
                    var list = new List<System.Data.Entity.Validation.DbValidationError>();
                    list.Add(new System.Data.Entity.Validation.DbValidationError("Name", "Card Name is required"));

                    return new System.Data.Entity.Validation.DbEntityValidationResult(entityEntry, list);
                }
            }
            return base.ValidateEntity(entityEntry, items);
        }

        public virtual DbSet<Board> Board { get; set; }
        public virtual DbSet<List> List { get; set; }
        public virtual DbSet<Card> Card { get; set; }
    
        public virtual ObjectResult<ProcedureTest_Result> ProcedureTest(Nullable<int> param1, Nullable<int> param2)
        {
            var param1Parameter = param1.HasValue ?
                new ObjectParameter("param1", param1) :
                new ObjectParameter("param1", typeof(int));
    
            var param2Parameter = param2.HasValue ?
                new ObjectParameter("param2", param2) :
                new ObjectParameter("param2", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProcedureTest_Result>("ProcedureTest", param1Parameter, param2Parameter);
        }
    }
}
